A51 MACRO ASSEMBLER  EVS33                                                                10/09/2023 16:09:04 PAGE     1


MACRO ASSEMBLER A51 V8.02b
OBJECT MODULE PLACED IN Evs33.OBJ
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE Evs33.a51 SET(SMALL) DEBUG EP

LOC  OBJ            LINE     SOURCE

0000                   1     ORG 0H
0000 020006            2     LJMP INIT
0003                   3     ORG 03H
0003 020010            4     LJMP HANDLE_INTERRUPT
0006                   5     INIT:
  00C0                 6     P4 EQU 0C0h
0006 75A881            7     MOV IE,#10000001b; enable int0
0009 758801            8     MOV TCON, #1;1/0
000C                   9     WAIT_INTERRUPT:
000C F5C0             10     MOV P4, A;
000E 80FC             11     SJMP WAIT_INTERRUPT
0010                  12     HANDLE_INTERRUPT:
                      13     ; r1, r2 - buf registers
                      14     
  0000                15     BASEADDRESS_A EQU 00h
  0004                16     BASEADDRESS_B EQU 04h
  0020                17     RES_ADDRESS EQU 20h
  0021                18     INDEX_ADDR EQU 21h ; address for storing index
0010 907FFA           19     MOV DPTR,#7FFAh
0013 E0               20     MOVX A,@DPTR;
0014 FA               21     MOV R2, A
0015 908000           22     MOV DPTR, #8000h
0018 20E403           23     JB ACC.4, MET1
001B 30E403           24     JNB ACC.4, PROGRAMM_C_0
001E                  25     MET1:
001E 0200A6           26     LJMP PROGRAMM_C_1
                      27     ; if C = 0
0021                  28     PROGRAMM_C_0:
                      29     
0021 5403             30     ANL A, #00000011b ; read A1A0
0023 7B00             31     MOV R3, #BASEADDRESS_A
0025 2B               32     ADD A, R3 ; address of element in A array 
0026 F582             33     MOV DPL, A
0028 E0               34     MOVX A, @DPTR
0029 FB               35     MOV R3, A ; A[A1A0]
                      36     
002A EA               37     MOV A, R2 ;read [C,B1,B0,A1,A0]
002B 540C             38     ANL A, #00001100b; read B1,B0
002D 03               39     RR A 
002E 03               40     RR A ; ACC.1 = B1, ACC.0 = B0
002F 7C04             41     MOV R4, #BASEADDRESS_B
0031 2C               42     ADD A, R4 ; address of element in B array
0032 F582             43     MOV DPL, A
0034 E0               44     MOVX A, @DPTR
0035 FC               45     MOV R4, A ; B[B1B0]
                      46     
0036 EB               47     MOV A, R3
                      48     ; R4 = b, R3 = a
                      49     ; build 16-bit value in R5 (low 8 bit) and R6(high 8 bit)
                      50     ; build low bits for R5 in B
0037 A2E7             51     MOV C, ACC.7
0039 92F0             52     MOV B.0, C
                      53     
003B A2E6             54     MOV C, ACC.6
003D 92F2             55     MOV B.2, C
                      56     
003F A2E5             57     MOV C, ACC.5
0041 92F4             58     MOV B.4, C
A51 MACRO ASSEMBLER  EVS33                                                                10/09/2023 16:09:04 PAGE     2

                      59     
0043 A2E4             60     MOV C, ACC.4
0045 92F6             61     MOV B.6, C
                      62     
0047 EC               63     MOV A, R4
                      64     
0048 A2E0             65     MOV C, ACC.0
004A 92F1             66     MOV B.1, C
                      67     
004C A2E1             68     MOV C, ACC.1
004E 92F3             69     MOV B.3, C
                      70     
0050 A2E2             71     MOV C, ACC.2
0052 92F5             72     MOV B.5, C
                      73     
0054 A2E3             74     MOV C, ACC.3
0056 92F7             75     MOV B.7, C
                      76     
0058 ADF0             77     MOV R5, B ; R5 = B = b3,a4,b2,a5,b1,a6,b0,a7
                      78     ;build high bit for R6 in B
005A EB               79     MOV A, R3
005B A2E3             80     MOV C, ACC.3
005D 92F0             81     MOV B.0, C
                      82     
005F A2E2             83     MOV C, ACC.2
0061 92F2             84     MOV B.2, C
                      85     
0063 A2E1             86     MOV C, ACC.1
0065 92F4             87     MOV B.4, C
                      88     
0067 A2E0             89     MOV C, ACC.0
0069 92F6             90     MOV B.6, C
                      91     
006B EC               92     MOV A, R4
                      93     
006C A2E4             94     MOV C, ACC.4
006E 92F1             95     MOV B.1, C
                      96     
0070 A2E5             97     MOV C, ACC.5
0072 92F3             98     MOV B.3, C
                      99     
0074 A2E6            100     MOV C, ACC.6
0076 92F5            101     MOV B.5, C
                     102     
0078 A2E7            103     MOV C, ACC.7
007A 92F7            104     MOV B.7, C
                     105     
007C AEF0            106     MOV R6, B; R6 = B = b7,a0,b6,a1,b5,a2,b4,a3
                     107     ; 16-bit value R6,R5
  0015               108     SEQ  EQU 00010101b
  001F               109     MASK EQU 00011111b
  000C               110     NUMBER_OF_ITERS EQU 0Ch ;16 - MASK_LENGTH + 1
007E 752100          111     MOV INDEX_ADDR, #00h; i = 0
0081 752000          112     MOV RES_ADDRESS,#00h ;init counter (use for this purpose result address)
0084                 113     COUNT_CYCLE:
0084 ED              114     MOV A, R5; load low bits
0085 541F            115     ANL A, #MASK
0087 9415            116     SUBB A, #SEQ ; check that last bits equal bit sequence
0089 7005            117     JNZ COUNT_NEXT
008B E520            118     MOV A, RES_ADDRESS
008D 04              119     INC A
008E F520            120     MOV RES_ADDRESS, A
0090                 121     COUNT_NEXT:
0090 C3              122     CLR C; C = 0
0091 EE              123     MOV A, R6 ; A = high bits of 16-bit value
0092 13              124     RRC A ; right shift of A, after which ACC.7 = 0 (because C = 0), 
A51 MACRO ASSEMBLER  EVS33                                                                10/09/2023 16:09:04 PAGE     3

                     125           ; ACC.n = ACC.(n + 1) n = 0...6 and new C = ACC.0 (previous ACC.0)
                     126               ; we have made arithmetic shift where C equals previous ACC.0 
0093 FE              127     MOV R6, A ;save new high bits
0094 ED              128     MOV A, R5 ; A = low bits of 16-bit value
0095 13              129     RRC A ; the same operation, but there prevous C is ACC.0 from high bits
                     130           ; so we shift our 16-bit value to right and fill higher bits by 0
0096 FD              131     MOV R5, A ; save new low bits
0097 E521            132     MOV A, INDEX_ADDR
0099 04              133     INC A
009A F521            134     MOV INDEX_ADDR, A
009C 740C            135     MOV A, #NUMBER_OF_ITERS
009E C3              136     CLR C; for calculating diff: NUMBER_OF_ITERS - i (without C)
009F 9521            137     SUBB A, INDEX_ADDR
00A1 70E1            138     JNZ COUNT_CYCLE
                     139     
00A3 0200FB          140     LJMP MOV_RESULT
                     141     
                     142     ; if C = 1
00A6                 143     PROGRAMM_C_1:
                     144     ; lets find maximum value in A array 
00A6 5403            145     ANL A, #00000011b ; read A1A0
00A8 FB              146     MOV R3, A
00A9 7400            147     MOV A, #BASEADDRESS_A
00AB 2B              148     ADD A, R3; upper board for maximum address in A array
00AC FB              149     MOV R3, A; save this board
                     150     
                     151     
  0022               152     MAX_A_ADDR EQU 22h ; address of maximum for A array
  0023               153     MAX_B_ADDR EQU 23h ; address of maximum for A array
                     154     ; cycle for finding maximum
00AD 752100          155     MOV INDEX_ADDR, #BASEADDRESS_A ; address of i
00B0 752200          156     MOV MAX_A_ADDR, #00h; maximum value in array A
00B3                 157     MAXIMUM_SEARCH_CYCLE_A:
00B3 EB              158     MOV A, R3
00B4 9521            159     SUBB A, INDEX_ADDR; check address <= R3
00B6 10D713          160     JBC PSW.7, FIND_MAX_ARRAY_B
00B9 852182          161     MOV DPL, INDEX_ADDR
00BC E0              162     MOVX A, @DPTR; get A[i]
00BD 9522            163     SUBB A, MAX_A_ADDR
00BF 10D703          164     JBC PSW.7, NEXT_INDEX_A
00C2 E0              165     MOVX A, @DPTR
00C3 F522            166     MOV MAX_A_ADDR, A; new maximum value
00C5                 167     NEXT_INDEX_A:
00C5 E521            168     MOV A, INDEX_ADDR
00C7 04              169     INC A; increment i
00C8 F521            170     MOV INDEX_ADDR, A; save new i
00CA 80E7            171     JMP MAXIMUM_SEARCH_CYCLE_A
                     172     
00CC                 173     FIND_MAX_ARRAY_B:
                     174     ; lets find maximum value in B array
00CC EA              175     MOV A, R2
00CD 540C            176     ANL A, #00001100b; read B1, B0
00CF 03              177     RR A
00D0 03              178     RR A ; ACC.1 = B1, ACC.0 = B0
00D1 FC              179     MOV R4, A
00D2 7404            180     MOV A, #BASEADDRESS_B
00D4 2C              181     ADD A, R4; upper board for maximum address in B array
00D5 FC              182     MOV R4, A; save this board
                     183     ; cycle for finding maximum
00D6 752104          184     MOV INDEX_ADDR, #BASEADDRESS_B ; address of i
00D9 752300          185     MOV MAX_B_ADDR, #00h; maximum value in array B
00DC                 186     MAXIMUM_SEARCH_CYCLE_B:
00DC EC              187     MOV A, R4
00DD 9521            188     SUBB A, INDEX_ADDR; check address <= R4
00DF 10D713          189     JBC PSW.7, CALCULATE_AND
00E2 852182          190     MOV DPL, INDEX_ADDR
A51 MACRO ASSEMBLER  EVS33                                                                10/09/2023 16:09:04 PAGE     4

00E5 E0              191     MOVX A, @DPTR; get B[i]
00E6 9523            192     SUBB A, MAX_B_ADDR
00E8 10D703          193     JBC PSW.7, NEXT_INDEX_B
00EB E0              194     MOVX A, @DPTR
00EC F523            195     MOV MAX_B_ADDR, A; new maximum value
00EE                 196     NEXT_INDEX_B:
00EE E521            197     MOV A, INDEX_ADDR
00F0 04              198     INC A; increment i
00F1 F521            199     MOV INDEX_ADDR, A; save new i
00F3 80E7            200     JMP MAXIMUM_SEARCH_CYCLE_B
                     201     
00F5                 202     CALCULATE_AND:
00F5 E522            203     MOV A, MAX_A_ADDR
00F7 5523            204     ANL A, MAX_B_ADDR
00F9 F520            205     MOV RES_ADDRESS, A
                     206     
00FB                 207     MOV_RESULT:
00FB E520            208     MOV A, RES_ADDRESS
00FD F9              209     MOV R1, A
00FE 89C0            210     MOV P4, R1
                     211     
0100                 212     HANDLE_END:
                     213     ;end of interrupt process
0100 89C0            214     MOV P4, R1
0102 32              215     RETI
                     216     END
A51 MACRO ASSEMBLER  EVS33                                                                10/09/2023 16:09:04 PAGE     5

SYMBOL TABLE LISTING
------ ----- -------


N A M E                 T Y P E  V A L U E   ATTRIBUTES

ACC. . . . . . . . . .  D ADDR   00E0H   A   
B. . . . . . . . . . .  D ADDR   00F0H   A   
BASEADDRESS_A. . . . .  N NUMB   0000H   A   
BASEADDRESS_B. . . . .  N NUMB   0004H   A   
CALCULATE_AND. . . . .  C ADDR   00F5H   A   
COUNT_CYCLE. . . . . .  C ADDR   0084H   A   
COUNT_NEXT . . . . . .  C ADDR   0090H   A   
DPL. . . . . . . . . .  D ADDR   0082H   A   
FIND_MAX_ARRAY_B . . .  C ADDR   00CCH   A   
HANDLE_END . . . . . .  C ADDR   0100H   A   
HANDLE_INTERRUPT . . .  C ADDR   0010H   A   
IE . . . . . . . . . .  D ADDR   00A8H   A   
INDEX_ADDR . . . . . .  N NUMB   0021H   A   
INIT . . . . . . . . .  C ADDR   0006H   A   
MASK . . . . . . . . .  N NUMB   001FH   A   
MAXIMUM_SEARCH_CYCLE_A  C ADDR   00B3H   A   
MAXIMUM_SEARCH_CYCLE_B  C ADDR   00DCH   A   
MAX_A_ADDR . . . . . .  N NUMB   0022H   A   
MAX_B_ADDR . . . . . .  N NUMB   0023H   A   
MET1 . . . . . . . . .  C ADDR   001EH   A   
MOV_RESULT . . . . . .  C ADDR   00FBH   A   
NEXT_INDEX_A . . . . .  C ADDR   00C5H   A   
NEXT_INDEX_B . . . . .  C ADDR   00EEH   A   
NUMBER_OF_ITERS. . . .  N NUMB   000CH   A   
P4 . . . . . . . . . .  N NUMB   00C0H   A   
PROGRAMM_C_0 . . . . .  C ADDR   0021H   A   
PROGRAMM_C_1 . . . . .  C ADDR   00A6H   A   
PSW. . . . . . . . . .  D ADDR   00D0H   A   
RES_ADDRESS. . . . . .  N NUMB   0020H   A   
SEQ. . . . . . . . . .  N NUMB   0015H   A   
TCON . . . . . . . . .  D ADDR   0088H   A   
WAIT_INTERRUPT . . . .  C ADDR   000CH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
