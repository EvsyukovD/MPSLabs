A51 MACRO ASSEMBLER  EVS33                                                                10/05/2023 20:17:09 PAGE     1


MACRO ASSEMBLER A51 V8.02b
OBJECT MODULE PLACED IN Evs33.OBJ
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE Evs33.a51 SET(SMALL) DEBUG EP

LOC  OBJ            LINE     SOURCE

0000                   1     ORG 0H
0000 020006            2     LJMP INIT
0003                   3     ORG 03H
0003 020010            4     LJMP HANDLE_INTERRUPT
0006                   5     INIT:
  00C0                 6     P4 EQU 0C0h
0006 75A881            7     MOV IE,#10000001b; enable int0
0009 758801            8     MOV TCON, #1;1/0
000C                   9     WAIT_INTERRUPT:
000C F5C0             10     MOV P4, A;
000E 80FC             11     SJMP WAIT_INTERRUPT
0010                  12     HANDLE_INTERRUPT:
  0000                13     BASEADDRESS_A EQU 00h
  0004                14     BASEADDRESS_B EQU 04h
0010 907FFA           15     MOV DPTR,#7FFAh
0013 E0               16     MOVX A,@DPTR;
0014 FA               17     MOV R2, A
0015 908000           18     MOV DPTR, #8000h
0018 20E47F           19     JB ACC.4, PROGRAMM_C_1
                      20     ; C = 0
001B                  21     PROGRAMM_C_0:
                      22     
001B 5403             23     ANL A, #00000011b ; read A1A0
001D 7B00             24     MOV R3, #BASEADDRESS_A
001F 2B               25     ADD A, R3 ; address of element in A array 
0020 F582             26     MOV DPL, A
0022 E0               27     MOVX A, @DPTR
0023 FB               28     MOV R3, A ; A[A1A0]
                      29     
0024 EA               30     MOV A, R2 ;read [C,B1,B0,A1,A0]
0025 540C             31     ANL A, #00001100b; read B1,B0
0027 03               32     RR A 
0028 03               33     RR A ; get ACC.1 = B1, ACC.0 = B0
0029 7C04             34     MOV R4, #BASEADDRESS_B
002B 2C               35     ADD A, R4 ; address of element in B array
002C F582             36     MOV DPL, A
002E E0               37     MOVX A, @DPTR
002F FC               38     MOV R4, A ; B[B1B0]
                      39     
0030 EB               40     MOV A, R3
                      41     ; R4 = b, R3 = a
                      42     ; build 16-bit value in R5 (low 8 bit) and R6(high 8 bit)
                      43     ; build low bits for R5 in B
0031 A2E7             44     MOV C, ACC.7
0033 92F0             45     MOV B.0, C
                      46     
0035 A2E6             47     MOV C, ACC.6
0037 92F2             48     MOV B.2, C
                      49     
0039 A2E5             50     MOV C, ACC.5
003B 92F4             51     MOV B.4, C
                      52     
003D A2E4             53     MOV C, ACC.4
003F 92F6             54     MOV B.6, C
                      55     
0041 EC               56     MOV A, R4
                      57     
0042 A2E0             58     MOV C, ACC.0
A51 MACRO ASSEMBLER  EVS33                                                                10/05/2023 20:17:09 PAGE     2

0044 92F1             59     MOV B.1, C
                      60     
0046 A2E1             61     MOV C, ACC.1
0048 92F3             62     MOV B.3, C
                      63     
004A A2E2             64     MOV C, ACC.2
004C 92F5             65     MOV B.5, C
                      66     
004E A2E3             67     MOV C, ACC.3
0050 92F7             68     MOV B.7, C
                      69     
0052 ADF0             70     MOV R5, B ; R5 = B = b3,a4,b2,a5,b1,a6,b0,a7
                      71     ;build high bit for R6 in B
0054 EB               72     MOV A, R3
0055 A2E3             73     MOV C, ACC.3
0057 92F0             74     MOV B.0, C
                      75     
0059 A2E2             76     MOV C, ACC.2
005B 92F2             77     MOV B.2, C
                      78     
005D A2E1             79     MOV C, ACC.1
005F 92F4             80     MOV B.4, C
                      81     
0061 A2E0             82     MOV C, ACC.0
0063 92F6             83     MOV B.6, C
                      84     
0065 EC               85     MOV A, R4
                      86     
0066 A2E4             87     MOV C, ACC.4
0068 92F1             88     MOV B.1, C
                      89     
006A A2E5             90     MOV C, ACC.5
006C 92F3             91     MOV B.3, C
                      92     
006E A2E6             93     MOV C, ACC.6
0070 92F5             94     MOV B.5, C
                      95     
0072 A2E7             96     MOV C, ACC.7
0074 92F7             97     MOV B.7, C
                      98     
0076 AEF0             99     MOV R6, B; R6 = B = b7,a0,b6,a1,b5,a2,b4,a3
                     100     ; 16-bit value R6,R5
  0015               101     SEQ  EQU 00010101b
  001F               102     MASK EQU 00011111b
  0020               103     TMP_ADDRESS EQU 20h
0078 752000          104     MOV 20h,#00h
007B ED              105     MOV A, R5
007C                 106     COUNT_CYCLE:
007C 541F            107     ANL A, #MASK
007E 9415            108     SUBB A, #SEQ ; check that last bits equal bit sequence
0080 7005            109     JNZ COUNT_NEXT
0082 E520            110     MOV A, 20h
0084 04              111     INC A
0085 F520            112     MOV 20h, A
0087                 113     COUNT_NEXT:
0087 C3              114     CLR C; C = 0
0088 EE              115     MOV A, R6 ; A = high bits of 16-bit value
0089 13              116     RRC A ; right shift of A, after which ACC.7 = 0 (because C = 0), 
                     117           ; ACC.n = ACC.(n + 1) n = 0...6 and new C = ACC.0 (previous ACC.0)
                     118               ; we have made arithmetic shift where C equals previous ACC.0 
008A FE              119     MOV R6, A ;save new high bits
008B ED              120     MOV A, R5
008C 13              121     RRC A ; the same operation, but there prevous C is ACC.0 from high bits
008D 6003            122     JZ MOV_RESULT
008F FD              123     MOV R5, A ; save new low bits
0090 80EA            124     JMP COUNT_CYCLE
A51 MACRO ASSEMBLER  EVS33                                                                10/05/2023 20:17:09 PAGE     3

                     125     
0092                 126     MOV_RESULT:
0092 E520            127     MOV A, 20h
0094 F9              128     MOV R1, A
0095 89C0            129     MOV P4, R1
                     130     
0097 02009A          131     LJMP HANDLE_END
                     132     ; C = 1
009A                 133     PROGRAMM_C_1:
                     134     ; r1, r2 - buf registers
                     135     ;end of interrupt process
009A                 136     HANDLE_END:
009A 89C0            137     MOV P4, R1
009C 32              138     RETI
                     139     END
A51 MACRO ASSEMBLER  EVS33                                                                10/05/2023 20:17:09 PAGE     4

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

ACC. . . . . . . .  D ADDR   00E0H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
BASEADDRESS_A. . .  N NUMB   0000H   A   
BASEADDRESS_B. . .  N NUMB   0004H   A   
COUNT_CYCLE. . . .  C ADDR   007CH   A   
COUNT_NEXT . . . .  C ADDR   0087H   A   
DPL. . . . . . . .  D ADDR   0082H   A   
HANDLE_END . . . .  C ADDR   009AH   A   
HANDLE_INTERRUPT .  C ADDR   0010H   A   
IE . . . . . . . .  D ADDR   00A8H   A   
INIT . . . . . . .  C ADDR   0006H   A   
MASK . . . . . . .  N NUMB   001FH   A   
MOV_RESULT . . . .  C ADDR   0092H   A   
P4 . . . . . . . .  N NUMB   00C0H   A   
PROGRAMM_C_0 . . .  C ADDR   001BH   A   
PROGRAMM_C_1 . . .  C ADDR   009AH   A   
SEQ. . . . . . . .  N NUMB   0015H   A   
TCON . . . . . . .  D ADDR   0088H   A   
TMP_ADDRESS. . . .  N NUMB   0020H   A   
WAIT_INTERRUPT . .  C ADDR   000CH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
