A51 MACRO ASSEMBLER  EVS4                                                                 11/06/2023 13:14:20 PAGE     1


MACRO ASSEMBLER A51 V8.02b
OBJECT MODULE PLACED IN Evs4.OBJ
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE Evs4.a51 SET(SMALL) DEBUG EP

LOC  OBJ            LINE     SOURCE

0000                   1             ORG 0000H
                       2     ;----main constants--
  00C0                 3             P4 EQU 0C0H
                       4             ;P0 EQU 080H
                       5             ;P1 EQU 090H
  0002                 6             TASK EQU 2
  0055                 7             SUCCESS_CODE EQU 055h
  00AA                 8             BLOCK_CODE EQU 0AAh
  0020                 9             PASSWORD_BASE_ADDRESS EQU 20h; we store password as array
  0024                10             TRIES_COUNT_ADDRESS EQU 24h; number of tries
  0025                11             N_ADDRESS EQU 25h; upper bound of tries
                      12             
                      13     ;----buffer-------
  0026                14             CURRENT_VAL_ADDRESS EQU 26h
  0027                15             PREV_VAL_ADDRESS EQU 27h
                      16     ;-----------------      
                      17     
  0028                18             INDEX_ADDRESS EQU 28h
  0029                19             CORRECT_ANSWERS_ADDR EQU 29h
                      20     ;N(i) errors count for calculating N(i + 1)
  002A                21             N1_ADDRESS EQU 2Ah
  002B                22             N2_ADDRESS EQU 2Bh
  002C                23             N3_ADDRESS EQU 2Ch
                      24     ;---init values------------
0000                  25     INIT:
0000 758000           26             MOV P0, #00h
0003 759000           27             MOV P1, #00h
0006 75A000           28             MOV P2, #00h
0009 752700           29             MOV PREV_VAL_ADDRESS, #00h
000C 752502           30             MOV N_ADDRESS, #2; N1
000F 85252A           31             MOV N1_ADDRESS, N_ADDRESS
0012 752400           32             MOV TRIES_COUNT_ADDRESS, #00h
0015 752800           33             MOV INDEX_ADDRESS, #00h
0018 752900           34             MOV CORRECT_ANSWERS_ADDR, #00h
                      35     ;----init password------
001B 752000           36             MOV PASSWORD_BASE_ADDRESS, #0
001E 7420             37             MOV A, #PASSWORD_BASE_ADDRESS
0020 04               38             INC A
0021 C8               39             XCH A, R0
0022 7602             40             MOV @R0, #2
0024 C8               41             XCH A, R0
0025 04               42             INC A
0026 C8               43             XCH A, R0
0027 7604             44             MOV @R0, #4
0029 C8               45             XCH A, R0
002A 04               46             INC A
002B C8               47             XCH A, R0
002C 7605             48             MOV @R0, #5
                      49     ;-----------------------
002E A820             50             MOV R0, PASSWORD_BASE_ADDRESS; R0 contains current correct bit
0030                  51     POLLING_P0_CYCLE:
0030 E580             52             MOV A, P0
0032 F526             53             MOV CURRENT_VAL_ADDRESS, A
0034 6527             54             XRL A, PREV_VAL_ADDRESS
0036 60F8             55             JZ POLLING_P0_CYCLE; is P0 changed?
0038                  56     GET_BIT:; extract bits via right rotate
0038 20E008           57             JB ACC.0, CHECK_ERROR
003B C528             58             XCH A, INDEX_ADDRESS
A51 MACRO ASSEMBLER  EVS4                                                                 11/06/2023 13:14:20 PAGE     2

003D 04               59             INC A
003E C528             60             XCH A, INDEX_ADDRESS; now index contains bit number
0040 03               61             RR A
0041 0138             62             AJMP GET_BIT
0043                  63     CHECK_ERROR:
0043 E520             64         MOV A, PASSWORD_BASE_ADDRESS
0045 2529             65             ADD A, CORRECT_ANSWERS_ADDR
0047 F8               66             MOV R0, A; now R0 contains correct value from password
0048 E528             67             MOV A, INDEX_ADDRESS
004A 98               68             SUBB A, R0
004B 600F             69             JZ PROCESS_CORRECT_BIT
004D                  70     PROCESS_ERROR_BIT:
004D E524             71         MOV A, TRIES_COUNT_ADDRESS
004F 04               72             INC A
0050 F524             73             MOV TRIES_COUNT_ADDRESS, A
0052 E525             74             MOV A, N_ADDRESS
0054 9524             75             SUBB A, TRIES_COUNT_ADDRESS; check that N >= tries_count
0056 10D758           76         JBC PSW.7, BLOCK_CYCLE
0059 020030           77         LJMP POLLING_P0_CYCLE
005C                  78     PROCESS_CORRECT_BIT:
005C E529             79         MOV A, CORRECT_ANSWERS_ADDR
005E 04               80             INC A
005F F529             81             MOV CORRECT_ANSWERS_ADDR, A
                      82     ;lets define which Ni we need to calculate
0061 7401             83             MOV A, #1; N2, because CORRECT_ANSWERS_ADDR from {0,1,2,3}
0063 9529             84             SUBB A, CORRECT_ANSWERS_ADDR
0065 600E             85             JZ CALC_N2
                      86             
0067 C3               87             CLR C; if C is 1 (A < CORRECT_ANSWERS_ADDR)
0068 7402             88             MOV A, #2; N3
006A 9529             89             SUBB A, CORRECT_ANSWERS_ADDR
006C 6013             90             JZ CALC_N3
                      91             
006E C3               92             CLR C
006F 7403             93             MOV A, #3; N4
0071 9529             94             SUBB A, CORRECT_ANSWERS_ADDR
0073 601D             95             JZ CALC_N4
                      96             
0075                  97     CALC_N2:
0075 752503           98             MOV N_ADDRESS, #3; new upper bound value for errors number
0078 85242A           99             MOV N1_ADDRESS, TRIES_COUNT_ADDRESS; num of tries on first iter
007B 752400          100             MOV TRIES_COUNT_ADDRESS, #00h
007E 020030          101             LJMP POLLING_P0_CYCLE
0081                 102     CALC_N3:
0081 E52A            103         MOV A, N1_ADDRESS
0083 85242B          104             MOV N2_ADDRESS, TRIES_COUNT_ADDRESS; num of tries on second iter
0086 252B            105             ADD A, N2_ADDRESS
0088 5401            106             ANL A, #01h
008A F525            107             MOV N_ADDRESS, A; new upper bound value for errors number
008C 752400          108             MOV TRIES_COUNT_ADDRESS, #00h
008F 020030          109         LJMP POLLING_P0_CYCLE
0092                 110     CALC_N4:
0092 85242C          111         MOV N3_ADDRESS, TRIES_COUNT_ADDRESS
0095 752400          112             MOV TRIES_COUNT_ADDRESS, #00h
0098 E52A            113             MOV A, N1_ADDRESS
009A 252B            114         ADD A, N2_ADDRESS
009C 252C            115             ADD A, N3_ADDRESS
009E FA              116             MOV R2, A; save sum of N1,N2,N3
009F 7905            117             MOV R1, #5
00A1 99              118             SUBB A, R1
00A2 10D702          119             JBC PSW.7, EXCHANGE
00A5 F525            120             MOV N_ADDRESS, A
                     121             
00A7                 122     EXCHANGE:
00A7 EA              123         MOV A, R2
00A8 7905            124             MOV R1, #5
A51 MACRO ASSEMBLER  EVS4                                                                 11/06/2023 13:14:20 PAGE     3

00AA C9              125             XCH A, R1
00AB 99              126             SUBB A, R1
00AC F525            127             MOV N_ADDRESS, A
00AE 020030          128             LJMP POLLING_P0_CYCLE
                     129     
                     130     
00B1                 131     BLOCK_CYCLE:
00B1 75C0AA          132             MOV P4, #BLOCK_CODE
00B4 01B1            133             AJMP BLOCK_CYCLE
                     134     
00B6                 135     CORRECT_PASSWORD:
00B6 759055          136         MOV P1, #SUCCESS_CODE
00B9 75A002          137             MOV P2, #TASK
00BC 020000          138             LJMP INIT
                     139             END
A51 MACRO ASSEMBLER  EVS4                                                                 11/06/2023 13:14:20 PAGE     4

SYMBOL TABLE LISTING
------ ----- -------


N A M E                T Y P E  V A L U E   ATTRIBUTES

ACC . . . . . . . . .  D ADDR   00E0H   A   
BLOCK_CODE. . . . . .  N NUMB   00AAH   A   
BLOCK_CYCLE . . . . .  C ADDR   00B1H   A   
CALC_N2 . . . . . . .  C ADDR   0075H   A   
CALC_N3 . . . . . . .  C ADDR   0081H   A   
CALC_N4 . . . . . . .  C ADDR   0092H   A   
CHECK_ERROR . . . . .  C ADDR   0043H   A   
CORRECT_ANSWERS_ADDR.  N NUMB   0029H   A   
CORRECT_PASSWORD. . .  C ADDR   00B6H   A   
CURRENT_VAL_ADDRESS .  N NUMB   0026H   A   
EXCHANGE. . . . . . .  C ADDR   00A7H   A   
GET_BIT . . . . . . .  C ADDR   0038H   A   
INDEX_ADDRESS . . . .  N NUMB   0028H   A   
INIT. . . . . . . . .  C ADDR   0000H   A   
N1_ADDRESS. . . . . .  N NUMB   002AH   A   
N2_ADDRESS. . . . . .  N NUMB   002BH   A   
N3_ADDRESS. . . . . .  N NUMB   002CH   A   
N_ADDRESS . . . . . .  N NUMB   0025H   A   
P0. . . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . . .  D ADDR   00A0H   A   
P4. . . . . . . . . .  N NUMB   00C0H   A   
PASSWORD_BASE_ADDRESS  N NUMB   0020H   A   
POLLING_P0_CYCLE. . .  C ADDR   0030H   A   
PREV_VAL_ADDRESS. . .  N NUMB   0027H   A   
PROCESS_CORRECT_BIT .  C ADDR   005CH   A   
PROCESS_ERROR_BIT . .  C ADDR   004DH   A   
PSW . . . . . . . . .  D ADDR   00D0H   A   
SUCCESS_CODE. . . . .  N NUMB   0055H   A   
TASK. . . . . . . . .  N NUMB   0002H   A   
TRIES_COUNT_ADDRESS .  N NUMB   0024H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
